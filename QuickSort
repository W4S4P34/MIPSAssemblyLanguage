.data
	# ReadFile
						# Filename for input
	fin: 		.asciiz "C:/Users/HP/Downloads/MARS/input_sort.txt"
	fout:		.asciiz "C:/Users/HP/Downloads/MARS/output_sort.txt"							
	buffer: 	.space 1024		# Space to handle convertion
	# Escape Sequence
	CR:		.asciiz "\n"
	Spacebar:	.asciiz " "
.text
	.globl main

main:
#**********************#
	# Open the input file
	li	$v0, 13 			# System call for opening file
 	la	$a0, fin 			# Input filename
 	li	$a1, 0				# Flags to read
	li	$a2, 0				# Ignore mode
 	syscall 				# Open the file (File descriptor returned in $v0)

 	move 	$s0, $v0 			# Save file descriptor in $s0

	li	$t1, 0				# Initialize "count" variable
	li	$t2, 1				# Initialize "base" variable
	li	$t3, 0				# Initialize "sum" variable


#**********************#
	# Open the output file
	li	$v0, 13 			# System call for opening file
 	la	$a0, fout 			# Output filename
 	li	$a1, 1				# Flags to write
	li	$a2, 0				# Ignore mode
 	syscall 				# Open the file (File descriptor returned in $v0)

 	move 	$s1, $v0 			# Save file descriptor in $s0


#**********************#
	# Read the input file
readNumber:
	# Read number of elements
 	li 	$v0, 14 			# System call for reading from file
 	move	$a0, $s0 			# Put the file descriptor in $a0
 	la 	$a1, buffer			# Address of buffer from which to read
 	li 	$a2, 1				
 	syscall 				# Read from file 

	lb	$t0, buffer
		
	beq	$t0, 13, readNumber		# Endline with CR LF (\n\r) / Skip '\n'
	beq	$t0, 10, handleLF_Number	# Check whether buffer contains '\n' or not

	addi	$t0, $t0, -48			# Get real digit

	addi	$sp, $sp, -1	
	sb	$t0, ($sp)
	
	addi	$t1, $t1, 1

	j	readNumber
returnLF_Number:


#**********************#
	# Store number of elements to $s2
	lw	$s2, ($sp)			# Store number of elements to $s1

	addi	$sp, $sp, 4			# Move current $sp back to initial position


#**********************#
	li	$t5, 0				# Init "elementCount" variable/ "count" variable of $t1 contains "digitCount"

readElements:
returnSP_Elements:				# Should file iterator meet the ' ' character, it may continue to read file
	# Read elements
 	li 	$v0, 14 			# System call for reading from file
 	move	$a0, $s0 			# Put the file descriptor in $a0
 	la 	$a1, buffer			# Address of buffer from which to read
 	li 	$a2, 1				
 	syscall 				# Read from file 

	lb	$t0, buffer
	
	beq	$v0, $0, handleEOF
	beq	$t0, 13, readElements		# Check whether buffer contains '\n' or ' ' (Escape Sequence)
	beq	$t0, 10, readElements		# Endline with CR LF (\n\r) / Skip '\n'	and '\r'
	beq	$t0, 32, handleSP_Elements

	addi	$t0, $t0, -48			# Get real digit

	addi	$sp, $sp, -1	
	sb	$t0, ($sp)
	
	addi	$t1, $t1, 1

	j	readElements
returnEOF:


#**********************#
	# Reverse the array after reading from file
	li	$t0, 2
	div	$s2, $t0
	mflo	$t0

	move 	$a0, $t0			# $a0 holds number of half input elements

	li	$t0, 4				# Calculate offset
	mult	$s2, $t0
	mflo	$t0

	addi	$t0, $t0, -4

	add	$sp, $sp, $t0

	la	$t1, ($sp)			# $t1 points to last element

	li	$t3, -1				# Calculate offset
	mult	$t3, $t0
	mflo	$t0

	add	$sp, $sp, $t0

	la	$t2, ($sp)			# $t2 points to first element

	li	$t0, 0				# Initialize "index" variable

	jal	reverseArray


#**********************#
	# QuickSort
	la	$a0, ($sp)			# Load array into $a0
	li	$a1, 0				# $a1 = low = 0
	move	$a2, $s2			# Move number of elements into $a2
	addi	$a2, $a2, -1			# Set $a2 = high = number of elements - 1
	jal 	QuickSort


#**********************#
	# Convert each integer to string and output
	li	$t0, 0				# $t0 holds index of each element
	la	$t1, ($sp)			# $t1 points to the array

convertItoS:
	addi	$t0, $t0, 1

	la	$t3, buffer			# $t3 points to space to handle convertion

	li	$t4, 0				# $t4 holds number of digits

	beq	$t0, 10, EOF

	li	$t2, 32				# ' '
	sb	$t2, ($t3)

	addi	$t4, $t4, 1

EOF:
	lw	$t2, ($t1)			# Get number to convert and print and store to $t2

LoopItoS:
	addi	$t3, $t3, -1			# Point to next digit

	li	$t5, 10
	div	$t2, $t5
	mflo	$t2				# $t2 holds new value after being divided (Quotient)
	mfhi	$t5				# $t5 holds Remainder
	
	add	$t5, $t5, '0'			# Change digit into ASCII code
	sb	$t5, ($t3)

	addi	$t4, $t4, 1

	bne	$t2, $0, LoopItoS

	addi	$t1, $t1, 4

	# Output to file
	li  	$v0, 15   			# System call for write to file
	move	$a0, $s1    			# File descriptor 
	move	$a1, $t3   			# Address of buffer from which to write
	li	$a2, 0
	add	$a2, $a2, $t4       		# Buffer length
	syscall           			# Write to file
	
	bne	$t0, $s2, convertItoS		# If ($t0 != $s2), back to convertion function


#**********************#
	# Free the stack frame
	li	$t0, 4

	mult	$t0, $s2
	mflo	$t0

	add	$sp, $sp, $t0			# Free stack frame


#**********************#
 	# Close the input file
	li 	$v0, 16 			# System call for closing file 
 	move 	$a0, $s0 			# Restore file descriptor
 	syscall 				# Close file


#**********************#
 	# Close the output file
	li 	$v0, 16 			# System call for closing file 
 	move 	$a0, $s1 			# Restore file descriptor
 	syscall 				# Close file

	# Exit program
 	li 	$v0, 10 			# End the program
 	syscall 


#*********************************************************#
handleLF_Number:
	lb	$t0, ($sp)			# Get current digit
	addi	$sp, $sp, 1			# Move up the stack pointer

	mult	$t0, $t2			# Multiple digit by base
	mflo	$t0

	add	$t3, $t3, $t0			# Sum up all digits to create the number

	addi	$t1, $t1, -1			# Decrease the "count" variable

	li	$t4, 10				# $t4 = 10

	mult	$t2, $t4			# Increase the position of digit
	mflo	$t2

	bne	$t1, $0, handleLF_Number

	addi	$sp, $sp, -4			# Set $sp to proper position
	sw	$t3, ($sp)

	# Restore all temporary registers
	li	$t1, 0				# Reset "count" to 0
	li	$t2, 1				# Reset "base" to 1
	li	$t3, 0				# Reset "sum" to 0
	
	j	returnLF_Number


#*********************************************************#
handleEOF:
	beq	$t5, $s2, returnEOF		# If "elementCount" == Number of elements,
						# return back to main

	lb	$t0, ($sp)			# Get current digit
	addi	$sp, $sp, 1			# Move up the stack pointer

	mult	$t0, $t2			# Multiple digit by base
	mflo	$t0

	add	$t3, $t3, $t0			# Sum up all digits to create the number

	addi	$t1, $t1, -1			# Decrease the "count" variable

	li	$t4, 10				# $t4 = 10

	mult	$t2, $t4			# Increase the position of digit
	mflo	$t2

	bne	$t1, $0, handleEOF

	addi	$sp, $sp, -4			# Set $sp to proper position
	sw	$t3, ($sp)

	# Restore all temporary registers
	li	$t1, 0				# Reset "count" to 0
	li	$t2, 1				# Reset "base" to 1
	li	$t3, 0				# Reset "sum" to 0
	
	j	returnEOF


#*********************************************************#
handleSP_Elements:
	lb	$t0, ($sp)			# Get current digit
	addi	$sp, $sp, 1			# Move up the stack pointer

	mult	$t0, $t2			# Multiple digit by base
	mflo	$t0

	add	$t3, $t3, $t0			# Sum up all digits to create the number

	addi	$t1, $t1, -1			# Decrease the "count" variable

	li	$t4, 10				# $t4 = 10

	mult	$t2, $t4			# Increase the position of digit
	mflo	$t2

	bne	$t1, $0, handleSP_Elements

	addi	$t5, $t5, 1			# Increase "elementCount"

	addi	$sp, $sp, -4			# Set $sp to proper position
	sw	$t3, ($sp)

	# Restore all temporary registers
	li	$t1, 0				# Reset "count" to 0
	li	$t2, 1				# Reset "base" to 1
	li	$t3, 0				# Reset "sum" to 0
	
	j	returnSP_Elements


#*********************************************************#
reverseArray:
	lw	$t3, ($t1)			# $t3 and $t4 holds pair of elements symmetric
	lw	$t4, ($t2) 

	sw	$t3, ($t2)			# Swap those elements with each other
	sw	$t4, ($t1)
	
	addi	$t0, $t0, 1			# Increase index
	addi	$t1, $t1, -4			# Move $t1 pointer to next element
	add	$t2, $t2, 4			# Move $t2 pointer to previous element

	bne	$t0, $a0, reverseArray

	# Reset temp variables' values
	li	$t0, 0
	li	$t1, 0
	li	$t2, 0

	jr	$ra


#*********************************************************#
	# QuickSort
Swap:
	addi 	$sp, $sp, -12

	sw	$a0, 0($sp)
	sw	$a1, 4($sp)
	sw	$a2, 8($sp)
	
	sll	$t1, $a1, 2			# $t1 = 4*i
	add	$t1, $a0, $t1			# $t1 take the address of a[i]
	lw	$s3, 0($t1)			# $s3 = a[i]

	sll	$t2, $a2, 2
	add	$t2, $a0, $t2
	lw	$s4, 0($t2)
	
	sw 	$s4, 0($t1)			# Swap a[i] and a[j]
	sw	$s3, 0($t2)

	addi 	$sp, $sp, 12
	jr 	$ra

Partition:
	addi 	$sp, $sp, -16
	sw	$a0, 0($sp)			# Array
	sw 	$a1, 4($sp)			# Low	
	sw	$a2, 8($sp)			# High
	sw	$ra, 12($sp)			# Return address

	move 	$s1, $a1			# Move low to $s1
	move 	$s2, $a2			# Move high to $s2

	sll	$t1, $s2, 2			# $t4 = 4*high
	add	$t1, $a0, $t1			# $t1 takes the address of a[high]
	lw	$t2, 0($t1)			# $t2 = a[high] = pivot
	
	addi	$t3, $s1, -1			# $t3 = low - 1 (Now $t3 = i)
	move 	$t4, $s1			# $t4 = low 	(Now $t4 = j)
	addi	$t5, $s2, -1			# $t5 = high - 1
	ForLoop:
		slt 	$t6, $t5, $t4		# If $t5 is less than low, then $t6 = 1 else $t6 = 0
		bne	$t6, $0, EndLoop
		
		sll	$t1, $t4, 2		# $t1 = 4*j
		add	$t1, $a0, $t1		# $t1 is address of a[j]
		lw	$t7, 0($sp)		# $t7 = a[j]
		slt	$t8, $t2, $t7		# If pivot is less than a[j]
		bne	$t8, $0, EndForIf	
		addi	$t3, $t3, 1		# i++

		move	$a1, $t3
		move 	$a2, $t4
		jal 	Swap

		addi 	$t4, $t4, 1		# j++
		j	ForLoop
		EndForIf:
			addi 	$t4, $t4, 1	# j++
			j	ForLoop
	EndLoop:
		addi 	$a1, $t3, 1		# $a1 = i++
		move	$a2, $s2		# $a2 = high
		add	$v0, $0, $a1		# v0 = i
		jal 	Swap
		
		lw	$ra, 12($sp)		# Return address
		addi	$sp, $sp, 16		# Restore the stack
		jr	$ra

QuickSort:
	addi	$sp, $sp, -16

	sw	$a0, 0($sp)			# Array
	sw	$a1, 4($sp)			# Low
	sw	$a2, 8($sp)			# High
	sw	$ra, 12($sp)			# Return address
	
	move	$t0, $a2			# Move high to $t0
	
	slt	$t1, $a1, $t0			# If low is < high, set $t1 = 1 else $t1 = 0
	beq 	$t1, $0, EndIf			# If low >= high then jump to EndIf
	
	jal 	Partition
	move 	$s0, $v0			# Pivot (?) Idk
	
	lw	$a1, 4($sp)			# $a1 = low
	addi 	$a2, $s0, -1			# $a2 = high - 1
	jal 	QuickSort
	
	lw	$a2, 8($s0)			# $a2 = high
	addi	$a1, $0, 1			# $a1 = low + 1
	jal 	QuickSort

EndIf:
	lw	$a0, 0($sp)			# Restore Array
	lw	$a1, 4($sp)			# Restore Low
	lw	$a2, 8($sp)			# Restore High
	lw	$ra, 12($sp)			# Restore Return Address
	addi	$sp, $sp, 16			# Restore Stack
	jr	$ra